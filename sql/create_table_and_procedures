

-- rdf_language

  CREATE TABLE "LTKM_LUONTO"."RDF_LANGUAGE" 
   ("LANGCODE" VARCHAR2(5 BYTE) NOT NULL ENABLE, 
	"NIMI" VARCHAR2(200 BYTE) NOT NULL ENABLE, 
	"PRIORITY" NUMBER(2,0) NOT NULL ENABLE, 
	"LANGNAME" VARCHAR2(200 BYTE) NOT NULL ENABLE, 
	 PRIMARY KEY ("LANGCODE")
   ) ;


-- rdf_resource


  CREATE TABLE "LTKM_LUONTO"."RDF_RESOURCE_HISTORY" 
   (	"RESOURCEID" NUMBER(10,0) NOT NULL ENABLE, 
	"RESOURCEURI" VARCHAR2(400 BYTE) NOT NULL ENABLE, 
	"RESOURCENAME" VARCHAR2(400 BYTE) NOT NULL ENABLE, 
	"RESOURCELITERAL" VARCHAR2(4000 BYTE), 
	"RESOURCELITERAL2" CLOB, 
	"RESOURCEXML" "SYS"."XMLTYPE" , 
	"RESOURCETYPEFK" NUMBER(10,0), 
	"CREATED" DATE DEFAULT SYSDATE NOT NULL ENABLE, 
	"USERFK" NUMBER(10,0) NOT NULL ENABLE, 
	"LANGCODEFK" VARCHAR2(3 BYTE), 
	"DELETED" DATE DEFAULT SYSDATE NOT NULL ENABLE, 
	"DELETED_USERFK" NUMBER, 
	"VISIBILITY" NUMBER(2,0) DEFAULT 0, 
	"PARENTFK" NUMBER(10,0)
   );


  CREATE TABLE "LTKM_LUONTO"."RDF_RESOURCE" 
   ("RESOURCEID" NUMBER(10,0) NOT NULL ENABLE, 
	"RESOURCEURI" VARCHAR2(400 BYTE) NOT NULL ENABLE, 
	"RESOURCENAME" VARCHAR2(400 BYTE) NOT NULL ENABLE, 
	"RESOURCELITERAL" VARCHAR2(4000 BYTE), 
	"RESOURCELITERAL2" CLOB, 
	"RESOURCEXML" "SYS"."XMLTYPE" , 
	"RESOURCETYPEFK" NUMBER(10,0), 
	"CREATED" DATE DEFAULT SYSDATE NOT NULL ENABLE, 
	"USERFK" NUMBER(10,0) NOT NULL ENABLE, 
	"LANGCODEFK" VARCHAR2(3 BYTE), 
	"VISIBILITY" NUMBER(2,0) DEFAULT 0, 
	"PARENTFK" NUMBER(10,0), 
	 PRIMARY KEY ("RESOURCEID")

	 CONSTRAINT "FK_LANGCODE" FOREIGN KEY ("LANGCODEFK")
	  REFERENCES "LTKM_LUONTO"."RDF_LANGUAGE" ("LANGCODE") ENABLE, 
	 CONSTRAINT "FK_RESOURCETYPE" FOREIGN KEY ("RESOURCETYPEFK")
	  REFERENCES "LTKM_LUONTO"."RDF_RESOURCE" ("RESOURCEID") ENABLE, 
	 CONSTRAINT "FK_USER" FOREIGN KEY ("USERFK")
	  REFERENCES "LTKM_LUONTO"."RDF_RESOURCE" ("RESOURCEID") ENABLE, 
	 CONSTRAINT "FK_PARENTFK_RESOURCEID" FOREIGN KEY ("PARENTFK")
	  REFERENCES "LTKM_LUONTO"."RDF_RESOURCE" ("RESOURCEID") ON DELETE CASCADE ENABLE
   ) 
  CREATE UNIQUE INDEX "LTKM_LUONTO"."IX_RESOURCE_LITERAL" ON "LTKM_LUONTO"."RDF_RESOURCE" ("RESOURCELITERAL", "LANGCODEFK");

  CREATE INDEX "LTKM_LUONTO"."IX_RESOURCE_LITERAL_TEXT" ON "LTKM_LUONTO"."RDF_RESOURCE" ("RESOURCELITERAL");

  CREATE UNIQUE INDEX "LTKM_LUONTO"."IX_RESOURCE_RESOURCENAME" ON "LTKM_LUONTO"."RDF_RESOURCE" ("RESOURCENAME");

  CREATE INDEX "LTKM_LUONTO"."IX_RESOURCE_RESOURCENAME2" ON "LTKM_LUONTO"."RDF_RESOURCE" ("RESOURCENAME", "RESOURCEID");

  CREATE UNIQUE INDEX "LTKM_LUONTO"."IX_RESOURCE_RESOURCEURI" ON "LTKM_LUONTO"."RDF_RESOURCE" ("RESOURCEURI");

  CREATE INDEX "LTKM_LUONTO"."IX_UPPERLITERAL" ON "LTKM_LUONTO"."RDF_RESOURCE" (UPPER("RESOURCELITERAL"));

  CREATE OR REPLACE EDITIONABLE TRIGGER "LTKM_LUONTO"."TR_RDF_RESOURCE_DELETE" 
BEFORE DELETE
ON RDF_RESOURCE 
FOR EACH ROW
DECLARE
  v_userfk NUMBER;
BEGIN
  SELECT ltkm_luonto.GetUserFK
  INTO v_userfk
  FROM dual;

  INSERT INTO RDF_RESOURCE_HISTORY(RESOURCEID,RESOURCEURI,RESOURCENAME,RESOURCELITERAL,RESOURCELITERAL2,RESOURCEXML,RESOURCETYPEFK,CREATED,USERFK,LANGCODEFK,DELETED_USERFK,VISIBILITY,PARENTFK)
  VALUES (:OLD.RESOURCEID,:OLD.RESOURCEURI,:OLD.RESOURCENAME,:OLD.RESOURCELITERAL,:OLD.RESOURCELITERAL2,:OLD.RESOURCEXML,:OLD.RESOURCETYPEFK,:OLD.CREATED,:OLD.USERFK,:OLD.LANGCODEFK,v_userfk,:OLD.VISIBILITY,:OLD.PARENTFK);
END;

/
ALTER TRIGGER "LTKM_LUONTO"."TR_RDF_RESOURCE_DELETE" ENABLE;

  CREATE OR REPLACE EDITIONABLE TRIGGER "LTKM_LUONTO"."TR_RDF_RESOURCE_UPDATE" 
BEFORE UPDATE
ON RDF_RESOURCE 
FOR EACH ROW
DECLARE
  v_userfk NUMBER;
BEGIN
  SELECT ltkm_luonto.GetUserFK
  INTO v_userfk
  FROM dual;

  INSERT INTO RDF_RESOURCE_HISTORY(RESOURCEID,RESOURCEURI,RESOURCENAME,RESOURCELITERAL,RESOURCELITERAL2,RESOURCEXML,RESOURCETYPEFK,CREATED,USERFK,LANGCODEFK,DELETED_USERFK,VISIBILITY)
  VALUES (:OLD.RESOURCEID,:OLD.RESOURCEURI,:OLD.RESOURCENAME,:OLD.RESOURCELITERAL,:OLD.RESOURCELITERAL2,:OLD.RESOURCEXML,:OLD.RESOURCETYPEFK,:OLD.CREATED,:OLD.USERFK,:OLD.LANGCODEFK,v_userfk,:OLD.VISIBILITY);

  SELECT SYSDATE INTO :NEW.CREATED FROM DUAL;
END;

/
ALTER TRIGGER "LTKM_LUONTO"."TR_RDF_RESOURCE_UPDATE" ENABLE;



-- rdf_statement


  CREATE TABLE "LTKM_LUONTO"."RDF_STATEMENT_HISTORY" 
   (	"STATEMENTID" NUMBER(10,0) NOT NULL ENABLE, 
	"SUBJECTFK" NUMBER(10,0) NOT NULL ENABLE, 
	"PREDICATEFK" NUMBER(10,0) NOT NULL ENABLE, 
	"OBJECTFK" NUMBER(10,0) NOT NULL ENABLE, 
	"CONTEXTFK" NUMBER(10,0), 
	"CREATED" DATE DEFAULT SYSDATE NOT NULL ENABLE, 
	"USERFK" NUMBER(10,0) NOT NULL ENABLE, 
	"DELETED" DATE DEFAULT SYSDATE NOT NULL ENABLE, 
	"DELETED_USERFK" NUMBER
   ) ;



  CREATE TABLE "LTKM_LUONTO"."RDF_STATEMENT" 
   (	"STATEMENTID" NUMBER(10,0) NOT NULL ENABLE, 
	"SUBJECTFK" NUMBER(10,0) NOT NULL ENABLE, 
	"PREDICATEFK" NUMBER(10,0) NOT NULL ENABLE, 
	"OBJECTFK" NUMBER(10,0) NOT NULL ENABLE, 
	"CONTEXTFK" NUMBER(10,0), 
	"CREATED" DATE DEFAULT SYSDATE NOT NULL ENABLE, 
	"USERFK" NUMBER(10,0) NOT NULL ENABLE, 
	 PRIMARY KEY ("STATEMENTID")
	 CONSTRAINT "FK_SUBJECT_RESOURCE" FOREIGN KEY ("SUBJECTFK")
	  REFERENCES "LTKM_LUONTO"."RDF_RESOURCE" ("RESOURCEID") ON DELETE CASCADE ENABLE, 
	 CONSTRAINT "FK_PREDICATE_RESOURCE" FOREIGN KEY ("PREDICATEFK")
	  REFERENCES "LTKM_LUONTO"."RDF_RESOURCE" ("RESOURCEID") ENABLE, 
	 CONSTRAINT "FK_OBJECT_RESOURCE" FOREIGN KEY ("OBJECTFK")
	  REFERENCES "LTKM_LUONTO"."RDF_RESOURCE" ("RESOURCEID") ENABLE, 
	 CONSTRAINT "FK_CONTEXT_RESOURCE" FOREIGN KEY ("CONTEXTFK")
	  REFERENCES "LTKM_LUONTO"."RDF_RESOURCE" ("RESOURCEID") ENABLE
   );

  CREATE INDEX "LTKM_LUONTO"."IX_CONTEXTFK" ON "LTKM_LUONTO"."RDF_STATEMENT" ("CONTEXTFK", "SUBJECTFK", "PREDICATEFK", "OBJECTFK") ;

  CREATE INDEX "LTKM_LUONTO"."IX_OBJECTFK" ON "LTKM_LUONTO"."RDF_STATEMENT" ("OBJECTFK", "SUBJECTFK", "PREDICATEFK", "CONTEXTFK");

  CREATE INDEX "LTKM_LUONTO"."IX_PREDICATEFK" ON "LTKM_LUONTO"."RDF_STATEMENT" ("PREDICATEFK", "SUBJECTFK", "OBJECTFK", "CONTEXTFK");

  CREATE UNIQUE INDEX "LTKM_LUONTO"."IX_SUBJECTFK" ON "LTKM_LUONTO"."RDF_STATEMENT" ("SUBJECTFK", "PREDICATEFK", "OBJECTFK", "CONTEXTFK");

  CREATE OR REPLACE EDITIONABLE TRIGGER "LTKM_LUONTO"."TR_RDF_STATEMENT_UPDATE" 
BEFORE UPDATE
ON RDF_STATEMENT
FOR EACH ROW
DECLARE
  v_userfk NUMBER;
BEGIN
  SELECT ltkm_luonto.GetUserFK
  INTO v_userfk
  FROM dual;

  INSERT INTO RDF_STATEMENT_HISTORY(STATEMENTID,SUBJECTFK,PREDICATEFK,OBJECTFK,CONTEXTFK,CREATED,USERFK,DELETED_USERFK)
  VALUES (:OLD.STATEMENTID,:OLD.SUBJECTFK,:OLD.PREDICATEFK,:OLD.OBJECTFK,:OLD.CONTEXTFK,:OLD.CREATED,:OLD.USERFK,v_userfk);

  SELECT SYSDATE INTO :NEW.CREATED FROM DUAL;
END;

/
ALTER TRIGGER "LTKM_LUONTO"."TR_RDF_STATEMENT_UPDATE" ENABLE;

  CREATE OR REPLACE EDITIONABLE TRIGGER "LTKM_LUONTO"."TR_RDF_STATEMENT_DELETE" 
BEFORE DELETE
ON RDF_STATEMENT
FOR EACH ROW
DECLARE
  v_userfk NUMBER;
BEGIN
  SELECT ltkm_luonto.GetUserFK
  INTO v_userfk
  FROM dual;

  INSERT INTO RDF_STATEMENT_HISTORY(STATEMENTID,SUBJECTFK,PREDICATEFK,OBJECTFK,CONTEXTFK,CREATED,USERFK,DELETED_USERFK)
  VALUES (:OLD.STATEMENTID,:OLD.SUBJECTFK,:OLD.PREDICATEFK,:OLD.OBJECTFK,:OLD.CONTEXTFK,:OLD.CREATED,:OLD.USERFK,v_userfk);
END;

/
ALTER TRIGGER "LTKM_LUONTO"."TR_RDF_STATEMENT_DELETE" ENABLE;


-- AddResource

create or replace FUNCTION GetResourceURI(p_text VARCHAR2)
RETURN VARCHAR2
IS
  v_text VARCHAR2(2000);
BEGIN
  IF INSTR(p_text,'luomus:') > 0 THEN
    v_text := 'http://id.luomus.fi/' || REPLACE(p_text,'luomus:');
  ELSIF INSTR(p_text,'herbo:') > 0 THEN
    v_text := 'http://id.herb.oulu.fi/' || REPLACE(p_text,'herbo:');
  ELSIF INSTR(p_text,'zmuo:') > 0 THEN
    v_text := 'http://id.zmuo.oulu.fi/' || REPLACE(p_text,'zmuo:');
  ELSIF INSTR(p_text,'utu:') > 0 THEN
    v_text := 'http://mus.utu.fi/' || REPLACE(p_text,'utu:');
  ELSIF INSTR(p_text,'taxonid:') > 0 THEN
    v_text := 'http://taxonid.org/' || REPLACE(p_text,'taxonid:');
  ELSIF INSTR(p_text,'finbifterm:') > 0 THEN
    v_text := 'http://rs.laji.fi/terms/' || REPLACE(p_text,'finbifterm:');
  ELSIF INSTR(p_text,'dwc:') > 0 THEN
    v_text := 'http://rs.tdwg.org/dwc/terms/' || REPLACE(p_text,'dwc:');
  ELSIF INSTR(p_text,'dcterms:') > 0 THEN
    v_text := 'http://purl.org/dc/terms/' || REPLACE(p_text,'dcterms:');
  ELSIF INSTR(p_text,'dwciri:') > 0 THEN
    v_text := 'http://rs.tdwg.org/dwc/iri/' || REPLACE(p_text,'dwciri:');
  ELSE
    v_text := 'http://tun.fi/' || REPLACE(p_text,'tun:');
  END IF;
  RETURN v_text;
END;

CREATE OR REPLACE PROCEDURE AddResource
(
  p_resourcename IN VARCHAR2
)
AS 
  v_count     NUMBER;
  v_userfk    NUMBER;
  v_cleanname VARCHAR2(1000);
  v_prefixes  SYS.ODCIVARCHAR2LIST := SYS.ODCIVARCHAR2LIST(
    'utu:', 'zmuo:', 'herbo:', 'luomus:', 'taxonid:',
    'finbifterm:', 'dwc:', 'dcterms:', 'dwciri:'
  );
BEGIN
  -- Get the FK for the current user
  SELECT ltkm_luonto.GetUserFK
  INTO v_userfk
  FROM dual;

  -- Initialize cleaned name with original
  v_cleanname := p_resourcename;

  -- Remove known prefixes
  FOR i IN 1 .. v_prefixes.COUNT LOOP
    v_cleanname := REPLACE(v_cleanname, v_prefixes(i), '');
  END LOOP;

  -- Check if any unexpected colon remains
  IF INSTR(v_cleanname, ':') = 0 THEN
    SELECT COUNT(*)
    INTO v_count
    FROM rdf_resource
    WHERE resourcename = p_resourcename;
    
    IF v_count = 0 THEN
      INSERT INTO rdf_resource(resourceid, resourceuri, resourcename, userfk)
      VALUES (
        rdf_resource_seq.NEXTVAL,
        GetResourceURI(p_resourcename),
        p_resourcename,
        v_userfk
      );
    END IF;
  ELSE
    RAISE_APPLICATION_ERROR(-20001, 'Resource failed colon check: ' || p_resourcename);
  END IF;
END AddResource;


-- AddStatement

create or replace PROCEDURE AddStatement
  (
  p_subjectName IN VARCHAR2,
  p_predicateName IN VARCHAR2,
  p_objectName IN VARCHAR2,
  p_userQName IN VARCHAR2 DEFAULT NULL,
  p_contextName IN VARCHAR2 DEFAULT NULL
  )
---------------------------------------------------------
-- This procedure adds a new statement with
-- a QName as an object
-- into table RDF_RESOURCE
--
-- Parameter p_userQName added 29 Nov 2013
-- Parameter p_contextName added 31 Mar 2014
--
-- Created by  Tapani Lahti 27 Nov 2011
-- Modified by Viltsu 18 Aug 2015
---------------------------------------------------------
AS 
  v_subjectfk NUMBER;
  v_predicatefk NUMBER;
  v_objectfk NUMBER;
  v_contextfk NUMBER := NULL;
  v_count NUMBER;
  v_userfk NUMBER;
BEGIN
  -- Fetch UserFK
  IF p_userQName IS NOT NULL THEN
    FOR rec IN (
      SELECT resourceid 
      FROM ltkm_luonto.rdf_resource
      WHERE resourcename = p_userQName)
    LOOP
      v_userfk := rec.resourceid;
    END LOOP;
  ELSE
    SELECT ltkm_luonto.GetUserFK
    INTO v_userfk
    FROM dual;
  END IF;

  IF v_userfk IS NULL THEN
    v_userfk := 0;
  END IF;

  SELECT resourceid
  INTO v_subjectfk
  FROM rdf_resource
  WHERE resourcename = p_subjectName
  OR    resourceuri  = p_subjectName;

  SELECT resourceid
  INTO v_predicatefk
  FROM rdf_resource
  WHERE resourcename = p_predicateName
  OR    resourceuri  = p_predicateName;

  SELECT resourceid
  INTO v_objectfk
  FROM rdf_resource
  WHERE resourcename = p_objectName
  OR    resourceuri  = p_objectName;

  IF p_contextName IS NOT NULL THEN
    SELECT resourceid
    INTO v_contextfk
    FROM rdf_resource
    WHERE resourcename = p_contextName
    OR    resourceuri  = p_contextName;
  END IF;

  -- Check duplicates
  SELECT COUNT(*)
  INTO v_count
  FROM rdf_statement
  WHERE subjectfk = v_subjectfk
  AND predicatefk = v_predicatefk
  AND objectfk = v_objectfk
  AND COALESCE(contextfk,-1) = COALESCE(v_contextfk,-1);

  IF v_count = 0 THEN
    -- If the statement is unique, add it to the repository
    INSERT INTO rdf_statement(statementid,subjectfk,predicatefk,objectfk,contextfk,userfk)
    VALUES (rdf_statement_seq.NEXTVAL,v_subjectfk,v_predicatefk,v_objectfk,v_contextfk,v_userfk);
  END IF;
EXCEPTION
  WHEN DUP_VAL_ON_INDEX THEN
    NULL; -- Don't do anythign when insering failed by unique index
/*    
  WHEN OTHERS THEN
    raise_application_error(-20300, 'AddStatement failed');
*/
END ADDSTATEMENT;



-- AddStatementL

create or replace PROCEDURE AddStatementL
  (
  p_subjectName IN VARCHAR2,
  p_predicateName IN VARCHAR2,
  p_objectLiteral IN VARCHAR2,
  p_langCode IN VARCHAR2 DEFAULT NULL,
  p_userQName IN VARCHAR2 DEFAULT NULL,
  p_contextName IN VARCHAR2 DEFAULT NULL
  )
---------------------------------------------------------
-- This procedure adds a new statement with
-- a literal value as an object
-- into table RDF_RESOURCE
--
-- Parameter p_userfk removed 13 Sep 2012 by TL
-- Parameter p_userqname added 29 Nov 2013
-- Parameter p_contextname added 31 Mar2014
--
-- Created by  Tapani Lahti 27 Nov 2011
-- Modified by Tapani Lahti 31 Mar 2014
---------------------------------------------------------
AS 
  v_subjectfk NUMBER;
  v_predicatefk NUMBER;
  v_objectfk NUMBER;
  v_contextfk NUMBER := NULL;
  v_userfk NUMBER;
  v_literal VARCHAR(4000 byte);
BEGIN
  v_literal := TrimLiteral(p_objectliteral);
  
  -- Fetch UserFK
  IF p_userQName IS NOT NULL THEN
    FOR rec IN (
      SELECT resourceid 
      FROM rdf_resource
      WHERE resourcename = p_userQName)
    LOOP
      v_userfk := rec.resourceid;
    END LOOP;
  ELSE
    SELECT GetUserFK
    INTO v_userfk
    FROM dual;
  END IF;

  -- Add literal into database
  AddLiteral(v_literal,p_langcode);

  -- Fetch subjectFK
  SELECT resourceid
  INTO v_subjectfk
  FROM rdf_resource
  WHERE resourcename = p_subjectname
  OR    resourceuri  = p_subjectname;

  -- Fetch predicateFK
  SELECT resourceid
  INTO v_predicatefk
  FROM rdf_resource
  WHERE resourcename = p_predicatename
  OR    resourceuri  = p_predicatename;

  -- Fetch objectFK
  SELECT resourceid
  INTO v_objectfk
  FROM rdf_resource
  WHERE resourceliteral = v_literal
  AND COALESCE(langcodefk,'.') = COALESCE(p_LangCode,'.');

  -- Fetch contextFK
  IF p_contextName IS NOT NULL THEN
    SELECT resourceid
    INTO v_contextfk
    FROM rdf_resource
    WHERE resourcename = p_contextname
    OR    resourceuri  = p_contextname;
  END IF;

  -- Insert new statement
  INSERT INTO rdf_statement(statementid,subjectfk,predicatefk,objectfk,contextfk,userfk)
  VALUES (rdf_statement_seq.NEXTVAL,v_subjectfk,v_predicatefk,v_objectfk,v_contextfk,v_userfk);

EXCEPTION
  WHEN DUP_VAL_ON_INDEX THEN
    NULL; -- Don't do anythign when insering failed by unique index
END AddStatementL;


-- rdf_statementview

  CREATE OR REPLACE FORCE EDITIONABLE VIEW "LTKM_LUONTO"."RDF_STATEMENTVIEW" ("STATEMENTID", "SUBJECTNAME", "PREDICATENAME", "OBJECTNAME", "CONTEXTNAME", "RESOURCELITERAL", "RESOURCELITERAL2", "LANGCODEFK", "CREATED", "USERFK", "SUBJECTURI", "PREDICATEURI", "OBJECTURI", "CONTEXTURI", "SUBJECTID", "PREDICATEID", "OBJECTID", "VISIBILITY") AS 
  SELECT st.statementid,
    s.resourcename AS subjectname,
    p.resourcename AS predicatename,
    o.resourcename AS objectname,
    c.resourcename AS contextname,
    o.resourceliteral,
    o.resourceliteral2,
    o.langcodefk,
    st.created,
    st.userfk,
    s.resourceuri AS subjecturi,
    p.resourceuri AS predicateuri,
    o.resourceuri AS objecturi,
    c.resourceuri AS contexturi,
    s.resourceid  AS subjectid,
    p.resourceid  AS predicateid,
    o.resourceid  AS objectid,
    s.visibility  AS visibility
  FROM rdf_statement st
  JOIN rdf_resource s
  ON st.subjectfk = s.resourceid
  JOIN rdf_resource p
  ON st.predicatefk = p.resourceid
  JOIN rdf_resource o
  ON st.objectfk = o.resourceid
  LEFT JOIN rdf_resource c
  ON st.contextfk = c.resourceid;


-- rdf_statementview_history


  CREATE OR REPLACE FORCE EDITIONABLE VIEW "LTKM_LUONTO"."RDF_STATEMENTVIEW_HISTORY" ("STATEMENTID", "SUBJECTNAME", "PREDICATENAME", "OBJECTNAME", "CONTEXTNAME", "RESOURCELITERAL", "LANGCODEFK", "CREATED", "USERFK", "DELETED", "DELETED_USERFK", "SUBJECTURI", "PREDICATEURI", "OBJECTURI", "CONTEXTURI", "SUBJECTID", "PREDICATEID", "OBJECTID", "VISIBILITY") AS 
  SELECT st.statementid,
    s.resourcename AS subjectname,
    p.resourcename AS predicatename,
    o.resourcename AS objectname,
    c.resourcename AS contextname,
    o.resourceliteral,
    o.langcodefk,
    st.created,
    st.userfk,
    st.deleted,
    st.deleted_userfk,
    s.resourceuri AS subjecturi,
    p.resourceuri AS predicateuri,
    o.resourceuri AS objecturi,
    c.resourceuri AS contexturi,
    s.resourceid  AS subjectid,
    p.resourceid  AS predicateid,
    o.resourceid  AS objectid,
    s.visibility  AS visibility
  FROM rdf_statement_history st
  JOIN rdf_resource s
  ON st.subjectfk = s.resourceid
  JOIN rdf_resource p
  ON st.predicatefk = p.resourceid
  JOIN rdf_resource o
  ON st.objectfk = o.resourceid
  LEFT JOIN rdf_resource c
  ON st.contextfk = c.resourceid;

  
-- function GetUserFK

create or replace FUNCTION GetUserFK
RETURN NUMBER
IS
  v_userfk NUMBER;
BEGIN
  BEGIN
    SELECT resourceid
    INTO v_userfk
    FROM ltkm_luonto.rdf_resource
    WHERE resourcename = replace(user,'USER_MA','MA.');
  EXCEPTION
    WHEN OTHERS THEN
      v_userfk := 0;
  END;

  RETURN v_userfk;
END;

